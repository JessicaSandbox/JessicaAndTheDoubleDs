Class Bank

Class Bank is responsible for the main method, and managing customers and accounts.

Bank (name)
    Creates a new Bank object with the given name 
static void main(String[] args)
    Handles initialization tasks (such as persistence, if that was implemented in this project, which it is not) 
void addAccount()
    Creates a new bank account 
void removeAccount(String accountId)
    Deletes a given account.  (In the real world, just marks it as defunct or something.) 
void getAccounts ()
    Generates a report of all current accounts, in account ID order 
Account getAccount ( String accountId )
    Find an account given an account ID 
void addCustomer ()
    Add a new customer to the bank 
void removeCustomer (String customerId)
    Deletes a customer from the bank.  (In reality, just marks the customer as non-current.) 
void getCustomers ()
    Generates a report of all current customers, in customer ID order 
Customer getCustomer (String customerId)
    Get a Customer object, given a customer's ID 
List<Customer> getCustomer (String lastName, String firstName)
    Get a List of Customer objects, given a customer's last and first names.  (In this version, assume customer names are unique.) 
List<Account> getCustomersAccounts (String customerId)
    Return a List of a given customer's accounts (if any) 
Getters, setters, toString, and other methods as needed
    You need to test any non-trivial methods your group decides are a good idea. 

Class Customer

Class Customer is responsible for managing a customers details, including that customer's accounts.

Customer(String lastName, String firstName)
    Creates a new Customer object from a name.  Note for this project, we assume names are unique. 
SortedSet<Account> getCustomerAccounts()
    Returns a read-only SortedSet of the customer's active accounts (if any) 
Account getAccount ( String accountId)
    Returns an Account with the given account ID, or null if no such account 
double YtdFees ()
    the total fees paid by this customer for year-to-date 
double YtdInterest ()
    Returns the total interest paid to this customer for year-to-date 
Getters, setters, toString, and other methods as needed
    You need to test any non-trivial methods your group decides are a good idea. 

abstract class Account

Class Account is responsible for managing the details of any type of account, including an accountId, customerId, description, account creation date, the current balance, and the account's transaction list.

static void transfer (Account fromAccount, Account toAccount, double amount )
    Transfer funds between two accounts of a single customer. 
abstract void deposit (double amount)
    Add money into account 
abstract void withdraw (double amount)
    remove money from account 
Getters, setters, toString, and other methods as needed
    You need to test any non-trivial methods your group decides are a good idea. 

class SavingsAccount extends Account

Class SavingsAccount is an Account, but includes monthly interest payments.

SavingsAccount (double initialBalance, String customerId, String accountDescription)
    Create a new savings account 
void addInterest()
    Adds a transaction "INTEREST PAYMENT" based on this account's monthly interest rate. 
Getters, setters, (for example, to get and set the monthly interest rate), toString, and other methods as needed (for example, inherited abstract methods)
    You need to test any non-trivial methods your group decides are a good idea. 

class CheckingAccount extends Account

Class CheckingAccount is an Account, but includes various fees.

CheckingAccount (double initialBalance, String customerId, String accountDescription)
    Create a new checking account 
void applyFee( double amount )
    Adds a transaction "FEE" based on this account's monthly and other fees. 
Getters, setters, (for example, to get and set the overdraft fee), toString, and other methods as needed (for example, inherited abstract methods)
    You need to test any non-trivial methods your group decides are a good idea. 

class Transaction implements Comparable<Transaction>

Class Transaction objects represent any deposit or withdrawal on any account.  (Note transfers are implemented as a pair of transactions.)

Transaction(TransactionType type, double amount, String description)
    Create a new transaction 
Getters, setters, (for example, to get and possibly set the id, transaction timestamp, type, amount, and description), toString, and other methods as needed
    You need to test any non-trivial methods your group decides are a good idea. 

enum TransactionType

Enum TransactionType lists all possible transaction types.
